{
    "docs": [
        {
            "location": "/", 
            "text": "Warning\n\n\nVersion 7.1.0 has been discontinued. It is advised to migrate the project\nto 7.1.1 or above.\n\n\n\n\nMigration guide\n\n\n\n\nThe default location of the scaffolder config files have changed from \n_tools/es\n to \n.tools/es\n.\n   So in case you still want to use the default folder structure, please move the files.\n\n\n\n\nCreate a \nconfig.yaml\n inside \n.tools/es\n directory. An example configuration file is as follows.\n   Please adapt the shortcode and directory locations as per your project.\n\n\n```\nproject_short_code : bif\n\n\nPass the project specific directory locations.\n\n\ndirectories :\n  theme : sites/all/themes/custom/bif_frontend\n  templates : sites/all/themes/custom/bif_frontend/templates\n  patternlab : sites/all/themes/custom/bif_frontend/source\n```\n\n\n\n\n\n\nCreate/Update \n.es.log.yaml\n file in \n.tools/es\n to with the version of\n    scaffolder you want are using.\n    Eg.\n\n\nversion: 7.1.1\n\n\n\n\n\n\nrun \ndrush es\n\n\n\n\ncheck generated code and verify by testing.\n\n\n\n\n\n\nNote\n\n\nThe main difference in the generated code should be regarding how the field\npre-processing is done before it is used in templates. The later strategy\nrespects Drupal's field formatters.", 
            "title": "Home"
        }, 
        {
            "location": "/#migration-guide", 
            "text": "The default location of the scaffolder config files have changed from  _tools/es  to  .tools/es .\n   So in case you still want to use the default folder structure, please move the files.   Create a  config.yaml  inside  .tools/es  directory. An example configuration file is as follows.\n   Please adapt the shortcode and directory locations as per your project.  ```\nproject_short_code : bif", 
            "title": "Migration guide"
        }, 
        {
            "location": "/#pass-the-project-specific-directory-locations", 
            "text": "directories :\n  theme : sites/all/themes/custom/bif_frontend\n  templates : sites/all/themes/custom/bif_frontend/templates\n  patternlab : sites/all/themes/custom/bif_frontend/source\n```    Create/Update  .es.log.yaml  file in  .tools/es  to with the version of\n    scaffolder you want are using.\n    Eg.  version: 7.1.1    run  drush es   check generated code and verify by testing.    Note  The main difference in the generated code should be regarding how the field\npre-processing is done before it is used in templates. The later strategy\nrespects Drupal's field formatters.", 
            "title": "Pass the project specific directory locations."
        }, 
        {
            "location": "/contribute/entity-scaffolder/", 
            "text": "If you get stuck at any point, please create a \nticket on GitHub\n.\n\n\nPlugin enhancement\n\n\nContribution to plugin itself requires a good understanding of PHP, Drupal and features.\nThe Scaffolder for D7 tries to create files, which features would have created from configurations stored in the database.\n\n\nIf you want to help in creating more plugins or enhance existing ones, please contact the maintainers of the project via GitHub issue queue.\n\n\nContributing Field templates\n\n\nEntity Scaffolder is very opinionated. The definitions created by Entity Scaffolder follows a certain pattern. It uses templates with very restricted support of configurations. Thus, it creates very similar definitions (like field base, field instance, field preprocessing ...) across the whole project.\n\n\nFollowing path placeholders would be used in the examples that follows,\n\n\n\n\n%template_dir%\n : The template directory for scaffolder plugins for the given version. Eg, \n/Drush/EntityScaffolder/d7_1/templates/\n\n\n%field_name%\n : Name of the field that would be used as field type in input yaml files.\n\n\n\n\nField base, Field Instance and Field Preprocess definitions are all created under \n%template_dir%/%field_name%\n\n\nField Base\n\n\nThe templates and configurations required to create a field_base definition. Each new field definitions are added in \nfield_base\n directory under \n%template_dir%/%field_name%/\n.\n\n\nEg. for \nfile\n field,\n\n\n%template_dir%/file/field_base\n    config.yaml\n    feature.content.twig\n\n\n\n\nconfig.yaml\n supports following options\n\n\n\n\n\n\n\n\nOptions\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\ndependencies\n\n\nUsed to declare the field dependency with Drupal modules.\n\n\n\n\n\n\nvariables\n\n\nAn array of variables that is used to create the fields. The key is the name of the variable.\n\n\n\n\n\n\nvariables.%key%.required\n\n\nBoolean indicating if the variable is mandatory or not.\n\n\n\n\n\n\nvariables.%key%.default\n\n\nValue that is assigned to the variable if user doesn't provide it in the configuration.\n\n\n\n\n\n\n\n\nSample config.yaml\n\n\n# Declare the field dependency with Drupal files and media.\ndependencies :\n  - file\n  - media\nvariables :\n  cardinality :\n    type : numeric\n    placeholder : 1\n    # Make the field as non mandatory, i.e. no need to be supplied in yaml configuration.\n    required : false\n    # Use default value 1, when cardinality is not provided.\n    default : 1\n\n\n\n\nSample feature.content.twig\n\n\n\n\n  // Exported field_base: '{{ field_name }}'.\n  $field_bases['{{ field_name }}'] = array(\n    'active' =\n 1,\n    'cardinality' =\n {{ cardinality }},\n    'deleted' =\n 0,\n    'entity_types' =\n array(),\n    'field_name' =\n '{{ field_name }}',\n    'indexes' =\n array(\n      'fid' =\n array(\n        0 =\n 'fid',\n      ),\n    ),\n    'locked' =\n 0,\n    'module' =\n 'file',\n    'settings' =\n array(\n      'display_default' =\n 0,\n      'display_field' =\n 0,\n      'uri_scheme' =\n 'public',\n    ),\n    'translatable' =\n 0,\n    'type' =\n 'file',\n  );\n\n\n\n\nThe content of \nfeature.content.twig\n is the snippet required to create the feature export for field_base.\n\n\n\n\nTip\n\n\nTo generate above code,\n\n\n\n\nCreate a dummy field using Drupal's Field UI.\n\n\nExport the dummy field using feature\n\n\nCopy the base definition to feature.content.twig\n\n\nReplace the relevant part with placeholders. Eg. field_name and cardinality as seen above.\n\n\n\n\n\n\nField Instance\n\n\nField Instance definition generation is almost same as field base definition.\n\n\n%template_dir%/file/field_instance\n    config.yaml\n    feature.content.twig\n\n\n\n\nInstead of field_base, you would put the templates in field_instance.\nReplace the content in feature.content.twig with field instance output from exported dummy feature.\n\n\nField Preprocess\n\n\n%template_dir%/file/preprocess\n    config.yaml\n    code.content.twig\n    pattern.twig\n\n\n\n\n\n\nconfig.yaml follows more or less same convention as for field_base and field_instance's config.yaml\n\n\ncode.content.twig would contain the variables preprocessing template for theme.\n\n\npattern.twig will hold template for helper comment in twig template, showing details of variable and its mapping.", 
            "title": "EntityScaffolder"
        }, 
        {
            "location": "/contribute/entity-scaffolder/#plugin-enhancement", 
            "text": "Contribution to plugin itself requires a good understanding of PHP, Drupal and features.\nThe Scaffolder for D7 tries to create files, which features would have created from configurations stored in the database.  If you want to help in creating more plugins or enhance existing ones, please contact the maintainers of the project via GitHub issue queue.", 
            "title": "Plugin enhancement"
        }, 
        {
            "location": "/contribute/entity-scaffolder/#contributing-field-templates", 
            "text": "Entity Scaffolder is very opinionated. The definitions created by Entity Scaffolder follows a certain pattern. It uses templates with very restricted support of configurations. Thus, it creates very similar definitions (like field base, field instance, field preprocessing ...) across the whole project.  Following path placeholders would be used in the examples that follows,   %template_dir%  : The template directory for scaffolder plugins for the given version. Eg,  /Drush/EntityScaffolder/d7_1/templates/  %field_name%  : Name of the field that would be used as field type in input yaml files.   Field base, Field Instance and Field Preprocess definitions are all created under  %template_dir%/%field_name%", 
            "title": "Contributing Field templates"
        }, 
        {
            "location": "/contribute/entity-scaffolder/#field-base", 
            "text": "The templates and configurations required to create a field_base definition. Each new field definitions are added in  field_base  directory under  %template_dir%/%field_name%/ .  Eg. for  file  field,  %template_dir%/file/field_base\n    config.yaml\n    feature.content.twig  config.yaml  supports following options     Options  Details      dependencies  Used to declare the field dependency with Drupal modules.    variables  An array of variables that is used to create the fields. The key is the name of the variable.    variables.%key%.required  Boolean indicating if the variable is mandatory or not.    variables.%key%.default  Value that is assigned to the variable if user doesn't provide it in the configuration.     Sample config.yaml  # Declare the field dependency with Drupal files and media.\ndependencies :\n  - file\n  - media\nvariables :\n  cardinality :\n    type : numeric\n    placeholder : 1\n    # Make the field as non mandatory, i.e. no need to be supplied in yaml configuration.\n    required : false\n    # Use default value 1, when cardinality is not provided.\n    default : 1  Sample feature.content.twig  \n\n  // Exported field_base: '{{ field_name }}'.\n  $field_bases['{{ field_name }}'] = array(\n    'active' =  1,\n    'cardinality' =  {{ cardinality }},\n    'deleted' =  0,\n    'entity_types' =  array(),\n    'field_name' =  '{{ field_name }}',\n    'indexes' =  array(\n      'fid' =  array(\n        0 =  'fid',\n      ),\n    ),\n    'locked' =  0,\n    'module' =  'file',\n    'settings' =  array(\n      'display_default' =  0,\n      'display_field' =  0,\n      'uri_scheme' =  'public',\n    ),\n    'translatable' =  0,\n    'type' =  'file',\n  );  The content of  feature.content.twig  is the snippet required to create the feature export for field_base.   Tip  To generate above code,   Create a dummy field using Drupal's Field UI.  Export the dummy field using feature  Copy the base definition to feature.content.twig  Replace the relevant part with placeholders. Eg. field_name and cardinality as seen above.", 
            "title": "Field Base"
        }, 
        {
            "location": "/contribute/entity-scaffolder/#field-instance", 
            "text": "Field Instance definition generation is almost same as field base definition.  %template_dir%/file/field_instance\n    config.yaml\n    feature.content.twig  Instead of field_base, you would put the templates in field_instance.\nReplace the content in feature.content.twig with field instance output from exported dummy feature.", 
            "title": "Field Instance"
        }, 
        {
            "location": "/contribute/entity-scaffolder/#field-preprocess", 
            "text": "%template_dir%/file/preprocess\n    config.yaml\n    code.content.twig\n    pattern.twig   config.yaml follows more or less same convention as for field_base and field_instance's config.yaml  code.content.twig would contain the variables preprocessing template for theme.  pattern.twig will hold template for helper comment in twig template, showing details of variable and its mapping.", 
            "title": "Field Preprocess"
        }, 
        {
            "location": "/contribute/documentation/", 
            "text": "Improving Documenation\n\n\n\n\nTip\n\n\nTo edit existing pages, use the \nEdit on GitHub\n link on the top right corner of the page.\n\n\nTo add a new page to documentation please follow \nthe guideline provided by MKdocs\n to add new page and link them within the documentation.\n\n\n\n\n\n\nNote\n\n\n\n\nInstall MkDocs\n.\n\n\nInstall Mike\n.\n\n\nClone \nthe repo\n locally and switch to \ndevelop\n branch.\n\n\nRun \nmike deploy [version]\n\n\n\n\n\n\nResources\n\n\n\n\nWriting your docs in MKdocs", 
            "title": "Documentation"
        }, 
        {
            "location": "/contribute/documentation/#improving-documenation", 
            "text": "Tip  To edit existing pages, use the  Edit on GitHub  link on the top right corner of the page.  To add a new page to documentation please follow  the guideline provided by MKdocs  to add new page and link them within the documentation.    Note   Install MkDocs .  Install Mike .  Clone  the repo  locally and switch to  develop  branch.  Run  mike deploy [version]", 
            "title": "Improving Documenation"
        }, 
        {
            "location": "/contribute/documentation/#resources", 
            "text": "Writing your docs in MKdocs", 
            "title": "Resources"
        }
    ]
}