{
    "docs": [
        {
            "location": "/", 
            "text": "What is EntityScaffolder\n\n\nEntityScaffolder is a scaffolding tool. It is used to create Entities and Fields quickly and conviniently for a Drupal project.\n\n\nThe EntityScaffolder makes use of the Drush and other third party components which allows you to automatically generate much of code required to create some entities and fields. In addition, EntityScaffolder also provides some helper functions to support theming integration with patternlab based frontend.\n\n\nSome common tasks are:\n\n\n\n\nCreate Entities\n\n\nFieldable Panels Pane\n\n\nParagraphs\n\n\n\n\n\n\nAttach fields to created entities\n\n\nText\n\n\nLong Text\n\n\nFile\n\n\nImage\n\n\nPicture\n\n\nParagraph\n\n\n\n\n\n\nCreate image-styles, breakpoints and picture configurations\n\n\nCreate placeholder Drupal Templates\n\n\nAdd some preprocessing to the templates to provide sensible defaults to work with\n\n\n\n\nInstallation\n\n\nEntity Scaffolder depends on drush (the \nDRU\npal \nSH\nell). To use entity_scaffodler, you have to first download and install drush from \ndrush\n. Install instructions can be found at Drush's \nREADME.txt\n. It contains\na section about installing other commands like drush_make.\n\n\nHere is the relevant section.\n\n\nYou can put this folder in a number of places:\n\n- In a .drush folder in your HOME folder. Note, that you have to make the\n  .drush folder yourself (so you end up with ~/.drush/entity_scaffodler/README.md).\n- In a folder specified with the include option (see above).\n- In /path/to/drush/commands (not a Smart Thing, but it would work).\n\n\n\n\n\n\nNote\n\n\nAfter checking out the repo, please run \ncomposer install\n inside the entity_scaffodler directory.\n\n\n\n\nScaffold File Layout\n\n\nYour scaffolder source files should be written as regular yaml files, and placed in a directory somewhere in your project. Normally this directory will be named under \n.tools/es\n and will exist at the top level of your project.\n\n\nThe typical project you can create will look something like this:\n\n\n.tools/es/\n    config.yaml\n    fpp/\n        gallery.yaml\n        copy.yaml\n        intro.yaml\n        video.yaml\n        multimedia.yaml\n    paragraphs/\n        video.yaml\n        text.yaml\n        headline.yaml\n    breakpoint_groups/\n        Frontend.yaml\n    image_style/\n        article_image_portrait.yaml\n        article_image.yaml\n        card-related.yaml\n    picture/\n        article-image-portrait.yaml\n        article-image.yaml\n        card-related.yaml\n\n\n\n\nRunning EntityScaffolder\n\n\nUse EntityScaffolder as drush plugin\n\n\n$ cd \nyour-drupal-root-folder\n\n$ drush es\n\n\n\n\nThis will read cofniguration files from \n.tool/es\n directory under \nyour-drupal-root-folder\n.", 
            "title": "What is EntityScaffolder"
        }, 
        {
            "location": "/#what-is-entityscaffolder", 
            "text": "EntityScaffolder is a scaffolding tool. It is used to create Entities and Fields quickly and conviniently for a Drupal project.  The EntityScaffolder makes use of the Drush and other third party components which allows you to automatically generate much of code required to create some entities and fields. In addition, EntityScaffolder also provides some helper functions to support theming integration with patternlab based frontend.  Some common tasks are:   Create Entities  Fieldable Panels Pane  Paragraphs    Attach fields to created entities  Text  Long Text  File  Image  Picture  Paragraph    Create image-styles, breakpoints and picture configurations  Create placeholder Drupal Templates  Add some preprocessing to the templates to provide sensible defaults to work with", 
            "title": "What is EntityScaffolder"
        }, 
        {
            "location": "/#installation", 
            "text": "Entity Scaffolder depends on drush (the  DRU pal  SH ell). To use entity_scaffodler, you have to first download and install drush from  drush . Install instructions can be found at Drush's  README.txt . It contains\na section about installing other commands like drush_make.  Here is the relevant section.  You can put this folder in a number of places:\n\n- In a .drush folder in your HOME folder. Note, that you have to make the\n  .drush folder yourself (so you end up with ~/.drush/entity_scaffodler/README.md).\n- In a folder specified with the include option (see above).\n- In /path/to/drush/commands (not a Smart Thing, but it would work).   Note  After checking out the repo, please run  composer install  inside the entity_scaffodler directory.", 
            "title": "Installation"
        }, 
        {
            "location": "/#scaffold-file-layout", 
            "text": "Your scaffolder source files should be written as regular yaml files, and placed in a directory somewhere in your project. Normally this directory will be named under  .tools/es  and will exist at the top level of your project.  The typical project you can create will look something like this:  .tools/es/\n    config.yaml\n    fpp/\n        gallery.yaml\n        copy.yaml\n        intro.yaml\n        video.yaml\n        multimedia.yaml\n    paragraphs/\n        video.yaml\n        text.yaml\n        headline.yaml\n    breakpoint_groups/\n        Frontend.yaml\n    image_style/\n        article_image_portrait.yaml\n        article_image.yaml\n        card-related.yaml\n    picture/\n        article-image-portrait.yaml\n        article-image.yaml\n        card-related.yaml", 
            "title": "Scaffold File Layout"
        }, 
        {
            "location": "/#running-entityscaffolder", 
            "text": "Use EntityScaffolder as drush plugin  $ cd  your-drupal-root-folder \n$ drush es  This will read cofniguration files from  .tool/es  directory under  your-drupal-root-folder .", 
            "title": "Running EntityScaffolder"
        }, 
        {
            "location": "/available-tasks/", 
            "text": "entity_scaffolder\n\n\nUse the information provided in scaffold source files to create features and helper modules.\n\n\nUsage:\n\n\n$ drush es\n\n\n\n\nAvailable Options\n\n\n\n\n\n\n\n\nOptions\n\n\nDefault\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\nconfig-dir\n\n\n.tools/es\n\n\nRelative path to the  directory where the scaffold source files have to be picked up from\n\n\n\n\n\n\ndebug\n\n\nfalse\n\n\nIf set to true, prints the output of scaffolder on screen", 
            "title": "Available tasks"
        }, 
        {
            "location": "/available-tasks/#entity_scaffolder", 
            "text": "Use the information provided in scaffold source files to create features and helper modules.  Usage:  $ drush es  Available Options     Options  Default  Details      config-dir  .tools/es  Relative path to the  directory where the scaffold source files have to be picked up from    debug  false  If set to true, prints the output of scaffolder on screen", 
            "title": "entity_scaffolder"
        }, 
        {
            "location": "/configurations/config/", 
            "text": "config.yaml\n\n\nProject specific configuration file.\n\n\nAll global settings required for the EntityScaffolder will be stored in this file. This file should be located in the directory supplied via \nconfig-dir\n option for \ndrush es\n.\n\n\nThe default location if no \nconfig-dir\n is supplied would be \n.tools/es/config.yaml\n.\n\n\nExample\n\n\nproject_short_code : mic\ntemplates:\n  factorial:\n    # Can be FALLBACK, EXTEND, OVERRIDE\n    type: OVERRIDE\n    dir: /.entity_scaffolder/factorial\n\n# Pass the project specific directory locations.\ndirectories :\n  theme : sites/all/themes/custom/my_custom_theme\n  templates : sites/all/themes/custom/my_custom_theme/templates\n  patternlab : sites/all/themes/custom/my_custom_theme/source\n\n\n\n\nKey/value pairs\n\n\nThe following key/value pairs provide meta-data about your scaffolder configuration and define some of the basic functionality.\n\n\n\n\nproject_short_code (required)\n\n\ntemplates (optional)\n\n\ndirectories (required)\n\n\n\n\nproject_short_code (required)\n\n\nProject short code. Used for various prefixes like module names, theme names, etc. Suggested to use 2 or 3 alphabets.\n\n\nproject_short_code : mic\n\n\n\n\ntemplates (optional)\n\n\nA list of custom template definitions for scaffolding.\n\n\nSupports 3 strategies,\n\n\n\n\nDEFAULT\n - Replace the template definitions provided by Entity Scaffolder, and sets itself as the default.\n\n\nFALLBACK\n - Use these templates only if they are missing in \nDEFAULT\n\n\nEXTEND\n - Use \nDEFAULT\n template only if they are missing in these templates.\n\n\n\n\nSo in short, EXTEND \n DEFAULT \n FALLBACK.\n\n\ntemplates:\n  factorial:\n    # Can be FALLBACK, EXTEND or OVERRIDE.\n    type: OVERRIDE\n    # path relative to `config-dir` with a leading slash.\n    dir: /.entity_scaffolder/factorial\n\n\n\n\ndirectories (required)\n\n\nEntity Scaffolder requires location of some directories to write generated files.\nThese can be supplied as such.\n\n\n# Pass the project specific directory locations.\ndirectories :\n  # Location of custom theme\n  theme : sites/all/themes/custom/my_custom_theme\n  # Location of template directory within the custom theme\n  templates : sites/all/themes/custom/my_custom_theme/templates\n  # Location of patternlab source folder.\n  patternlab : sites/all/themes/custom/my_custom_theme/source", 
            "title": "config.yaml"
        }, 
        {
            "location": "/configurations/config/#configyaml", 
            "text": "Project specific configuration file.  All global settings required for the EntityScaffolder will be stored in this file. This file should be located in the directory supplied via  config-dir  option for  drush es .  The default location if no  config-dir  is supplied would be  .tools/es/config.yaml .", 
            "title": "config.yaml"
        }, 
        {
            "location": "/configurations/config/#example", 
            "text": "project_short_code : mic\ntemplates:\n  factorial:\n    # Can be FALLBACK, EXTEND, OVERRIDE\n    type: OVERRIDE\n    dir: /.entity_scaffolder/factorial\n\n# Pass the project specific directory locations.\ndirectories :\n  theme : sites/all/themes/custom/my_custom_theme\n  templates : sites/all/themes/custom/my_custom_theme/templates\n  patternlab : sites/all/themes/custom/my_custom_theme/source", 
            "title": "Example"
        }, 
        {
            "location": "/configurations/config/#keyvalue-pairs", 
            "text": "The following key/value pairs provide meta-data about your scaffolder configuration and define some of the basic functionality.   project_short_code (required)  templates (optional)  directories (required)", 
            "title": "Key/value pairs"
        }, 
        {
            "location": "/configurations/config/#project_short_code-required", 
            "text": "Project short code. Used for various prefixes like module names, theme names, etc. Suggested to use 2 or 3 alphabets.  project_short_code : mic", 
            "title": "project_short_code (required)"
        }, 
        {
            "location": "/configurations/config/#templates-optional", 
            "text": "A list of custom template definitions for scaffolding.  Supports 3 strategies,   DEFAULT  - Replace the template definitions provided by Entity Scaffolder, and sets itself as the default.  FALLBACK  - Use these templates only if they are missing in  DEFAULT  EXTEND  - Use  DEFAULT  template only if they are missing in these templates.   So in short, EXTEND   DEFAULT   FALLBACK.  templates:\n  factorial:\n    # Can be FALLBACK, EXTEND or OVERRIDE.\n    type: OVERRIDE\n    # path relative to `config-dir` with a leading slash.\n    dir: /.entity_scaffolder/factorial", 
            "title": "templates (optional)"
        }, 
        {
            "location": "/configurations/config/#directories-required", 
            "text": "Entity Scaffolder requires location of some directories to write generated files.\nThese can be supplied as such.  # Pass the project specific directory locations.\ndirectories :\n  # Location of custom theme\n  theme : sites/all/themes/custom/my_custom_theme\n  # Location of template directory within the custom theme\n  templates : sites/all/themes/custom/my_custom_theme/templates\n  # Location of patternlab source folder.\n  patternlab : sites/all/themes/custom/my_custom_theme/source", 
            "title": "directories (required)"
        }, 
        {
            "location": "/configurations/entities/", 
            "text": "Entities\n\n\nUse the following table to determine the folder under which the configuration files for entities have to be placed.\n\n\n\n\n\n\n\n\nFolder Name\n\n\nEntity Type\n\n\n\n\n\n\n\n\n\n\nfpp\n\n\nFieldable Panels Panes\n\n\n\n\n\n\nparagraphs\n\n\nParagraph Items\n\n\n\n\n\n\n\n\nCreate a file for each entity bundle inside the respective folders. Usually the files are named according to the bundles.\n\n\nAn example bundle specific configuration file looks like below\n\n\n# Label of the Drupal entity bundle.\nname: Brochure\n\n# Machine name in Drupal.\nmachine_name: brochure\n\n# Fields acttached to the bundles.\nfields:\n  files:\n    map: download_brochure\n    cardinality: 1\n    type: file\n    label: PDF of our Brochure\n    file_extensions: \npdf\n\n  introduction:\n    map: introduction\n    type: text_long\n    label: Introduction\n    allowed_formats:\n      - html\n    default_format: html", 
            "title": "Entities"
        }, 
        {
            "location": "/configurations/entities/#entities", 
            "text": "Use the following table to determine the folder under which the configuration files for entities have to be placed.     Folder Name  Entity Type      fpp  Fieldable Panels Panes    paragraphs  Paragraph Items     Create a file for each entity bundle inside the respective folders. Usually the files are named according to the bundles.  An example bundle specific configuration file looks like below  # Label of the Drupal entity bundle.\nname: Brochure\n\n# Machine name in Drupal.\nmachine_name: brochure\n\n# Fields acttached to the bundles.\nfields:\n  files:\n    map: download_brochure\n    cardinality: 1\n    type: file\n    label: PDF of our Brochure\n    file_extensions:  pdf \n  introduction:\n    map: introduction\n    type: text_long\n    label: Introduction\n    allowed_formats:\n      - html\n    default_format: html", 
            "title": "Entities"
        }, 
        {
            "location": "/configurations/fields/", 
            "text": "Field Instances and Field Bases are defined in the \nEntity bundle\n they are attached to.\n\n\nFollowing fields are supported,\n\n\nText\n\n\n@TODO\n\n\nLong Text\n\n\n\n\n\n\n\n\nOptions\n\n\nDescriptions\n\n\n\n\n\n\n\n\n\n\ntype\n\n\nType of the field. Must be \ntext_long\n.\n\n\n\n\n\n\nmap\n\n\nPatternlab mapping\n\n\n\n\n\n\ncadrinality\n\n\nNumber of values stored in this field. -1 means unlimitted.\n\n\n\n\n\n\nlabel\n\n\nDrupal Field Label\n\n\n\n\n\n\nallowed formats\n\n\nList of allowed text formats.\n\n\n\n\n\n\ndefault_format\n\n\nDefault text format for the field.\n\n\n\n\n\n\n\n\nExample\n\n\nname: Copy\nmachine_name: copy\nfields:\n  content:\n    type: text_long\n    map: content\n    cardinality: 1\n    label: Content\n    allowed_formats:\n      - html\n    default_format: html\n\n\n\n\nFile\n\n\n@TODO\n\n\nImage\n\n\n@TODO\n\n\nParagraph\n\n\n@TODO", 
            "title": "Fields"
        }, 
        {
            "location": "/configurations/fields/#text", 
            "text": "@TODO", 
            "title": "Text"
        }, 
        {
            "location": "/configurations/fields/#long-text", 
            "text": "Options  Descriptions      type  Type of the field. Must be  text_long .    map  Patternlab mapping    cadrinality  Number of values stored in this field. -1 means unlimitted.    label  Drupal Field Label    allowed formats  List of allowed text formats.    default_format  Default text format for the field.     Example  name: Copy\nmachine_name: copy\nfields:\n  content:\n    type: text_long\n    map: content\n    cardinality: 1\n    label: Content\n    allowed_formats:\n      - html\n    default_format: html", 
            "title": "Long Text"
        }, 
        {
            "location": "/configurations/fields/#file", 
            "text": "@TODO", 
            "title": "File"
        }, 
        {
            "location": "/configurations/fields/#image", 
            "text": "@TODO", 
            "title": "Image"
        }, 
        {
            "location": "/configurations/fields/#paragraph", 
            "text": "@TODO", 
            "title": "Paragraph"
        }, 
        {
            "location": "/configurations/text_filters/", 
            "text": "What are features?\n\n\nFeatures\n provides a UI and API for\ntaking different site building components from modules with exportables and\nbundling them together in a single feature module. A feature module is like any\nother Drupal module except that it contains additional information in its info\nfile so that configuration can be checked, updated, or reverted programmatically.\n\n\nEntity Scaffolder makes use of features module to export its code. The actual\ncreation and update of the entities and fields are taken care by Features module.\n\n\nfe_es\n\n\n\n\nWarning\n\n\nDo not edit this feature manually. Changes will be lost/overriden next time\nyou run \ndrush es\n.\n\n\n\n\nMain features module created by Entity Scaffolder. Everytime you run \ndrush es\n\nthe folder gets overwritten.\n\n\nfe_es_filters\n\n\nProvides default text filters. The feature is not over-written in subsequent runs.\nThis allows updating and export of the feature per instance.\n\n\nRead more about text filters and input format on\nDrupal.org", 
            "title": "Features"
        }, 
        {
            "location": "/configurations/text_filters/#what-are-features", 
            "text": "Features  provides a UI and API for\ntaking different site building components from modules with exportables and\nbundling them together in a single feature module. A feature module is like any\nother Drupal module except that it contains additional information in its info\nfile so that configuration can be checked, updated, or reverted programmatically.  Entity Scaffolder makes use of features module to export its code. The actual\ncreation and update of the entities and fields are taken care by Features module.", 
            "title": "What are features?"
        }, 
        {
            "location": "/configurations/text_filters/#fe_es", 
            "text": "Warning  Do not edit this feature manually. Changes will be lost/overriden next time\nyou run  drush es .   Main features module created by Entity Scaffolder. Everytime you run  drush es \nthe folder gets overwritten.", 
            "title": "fe_es"
        }, 
        {
            "location": "/configurations/text_filters/#fe_es_filters", 
            "text": "Provides default text filters. The feature is not over-written in subsequent runs.\nThis allows updating and export of the feature per instance.  Read more about text filters and input format on\nDrupal.org", 
            "title": "fe_es_filters"
        }, 
        {
            "location": "/configurations/breakpoint_groups/", 
            "text": "Breakpoint Groups\n\n\nBreakpoint Groups contain the configuration of breakpoints and their grouping. Breakpoints are needed for the picture module, so it can map a specific image style to a given breakpoint.\n\n\nBreakpoint groups should resemble the frontend breakpoint configuration.\n\n\nBreakpoint groups are defined in one yaml file which is stored in the \n.tools/es/breakpoint_groups\n-folder.\n\n\nA grou consists of a list of breakpoints which store a machine-name a media-query and a list of multipliers (for retina-displays)\n\n\nHere's an example:\n\n\nname: Frontend breakpoints\nmachine_name: frontend\nbreakpoints:\n  - machine_name: xl-viewport\n    media: '(min-width: 1600px)'\n    multiplier:\n      - 1x\n      - 2x\n\n  - machine_name: lg-viewport\n    media: '(min-width: 1280px)'\n    multiplier:\n      - 1x\n      - 2x\n\n  - machine_name: md-viewport\n    media: '(min-width: 1024px) and (max-width: 1279px)'\n    multiplier:\n      - 1x\n      - 2x\n\n  - machine_name: md-lg-viewport\n    media: '(min-width: 1024px)'\n    multiplier:\n      - 1x\n      - 2x\n\n  - machine_name: sm-md-viewport\n    media: '(max-width: 1279px)'\n    multiplier:\n      - 1x\n      - 2x\n\n  - machine_name: sm-viewport\n    media: '(max-width: 1023px)'\n    multiplier:\n      - 1x\n      - 2x", 
            "title": "Breakpoint Groups"
        }, 
        {
            "location": "/configurations/breakpoint_groups/#breakpoint-groups", 
            "text": "Breakpoint Groups contain the configuration of breakpoints and their grouping. Breakpoints are needed for the picture module, so it can map a specific image style to a given breakpoint.  Breakpoint groups should resemble the frontend breakpoint configuration.  Breakpoint groups are defined in one yaml file which is stored in the  .tools/es/breakpoint_groups -folder.  A grou consists of a list of breakpoints which store a machine-name a media-query and a list of multipliers (for retina-displays)  Here's an example:  name: Frontend breakpoints\nmachine_name: frontend\nbreakpoints:\n  - machine_name: xl-viewport\n    media: '(min-width: 1600px)'\n    multiplier:\n      - 1x\n      - 2x\n\n  - machine_name: lg-viewport\n    media: '(min-width: 1280px)'\n    multiplier:\n      - 1x\n      - 2x\n\n  - machine_name: md-viewport\n    media: '(min-width: 1024px) and (max-width: 1279px)'\n    multiplier:\n      - 1x\n      - 2x\n\n  - machine_name: md-lg-viewport\n    media: '(min-width: 1024px)'\n    multiplier:\n      - 1x\n      - 2x\n\n  - machine_name: sm-md-viewport\n    media: '(max-width: 1279px)'\n    multiplier:\n      - 1x\n      - 2x\n\n  - machine_name: sm-viewport\n    media: '(max-width: 1023px)'\n    multiplier:\n      - 1x\n      - 2x", 
            "title": "Breakpoint Groups"
        }, 
        {
            "location": "/configurations/image_styles/", 
            "text": "Image styles\n\n\nThe folder \nimage_style\n contains a set of yaml-files defining one or more image styles. Each yaml-file contains a set of image styles.\n\n\nHere's an example:\n\n\nprefix:\n  machine_name: article_image_portrait_\n  name: \nArticle Image (portrait)\n\n\nmultiplier:\n  - 1x\n  - 2x\n\nimage_styles:\n  - machine_name: xl-viewport\n    effects:\n      - name: image_scale\n        data:\n          width: 468\n  - machine_name: lg-viewport\n    effects:\n      - name: image_scale\n        data:\n          width: 468\n  - machine_name: md-viewport\n    effects:\n      - name: image_scale\n        data:\n          width: 468\n  - machine_name: sm-viewport\n    effects:\n      - name: image_scale\n        data:\n          width: 288\n\n\n\n\nWhen using the \nprefix\nthe name of a single image style will be \nprefix/machine_name\nmachine_name\n  e.g. \narticle_image_portrait_md-viewport\n\n\neffects\n contains a list of image effects. \nes\nsupports these image-effects:\n\n\n\n\nimage_scale\n\n\nimage_desaturate\n\n\nfocal_point_scale_and_crop", 
            "title": "Image styles"
        }, 
        {
            "location": "/configurations/image_styles/#image-styles", 
            "text": "The folder  image_style  contains a set of yaml-files defining one or more image styles. Each yaml-file contains a set of image styles.  Here's an example:  prefix:\n  machine_name: article_image_portrait_\n  name:  Article Image (portrait) \n\nmultiplier:\n  - 1x\n  - 2x\n\nimage_styles:\n  - machine_name: xl-viewport\n    effects:\n      - name: image_scale\n        data:\n          width: 468\n  - machine_name: lg-viewport\n    effects:\n      - name: image_scale\n        data:\n          width: 468\n  - machine_name: md-viewport\n    effects:\n      - name: image_scale\n        data:\n          width: 468\n  - machine_name: sm-viewport\n    effects:\n      - name: image_scale\n        data:\n          width: 288  When using the  prefix the name of a single image style will be  prefix/machine_name machine_name   e.g.  article_image_portrait_md-viewport  effects  contains a list of image effects.  es supports these image-effects:   image_scale  image_desaturate  focal_point_scale_and_crop", 
            "title": "Image styles"
        }, 
        {
            "location": "/configurations/pictures/", 
            "text": "Pictures\n\n\nThe folder \npicture\n contains a set of yaml-files defining one or more picture-configurations. A picture has a machine name and a mapping of breakpoints, multipliers to image-styles.\n\n\nThe picture-module will render a \npicture\n-element applying the configuration.\n\n\nA yaml-file can contain only one configuration for a picture. It references the breakpoint_group and has a \nmapping\n mapping breakpoints, multipliers to a given image-style.\n\n\nHere's an example:\n\n\nmachine_name: article_image_portrait\nname: \nArticle image (portrait)\n\nbreakpoint_group: frontend\nmapping:\n  xl-viewport:\n    1x: article_image_portrait_xl_viewport_1x\n    2x: article_image_portrait_xl_viewport_2x\n  lg-viewport:\n    1x: article_image_portrait_lg_viewport_1x\n    2x: article_image_portrait_lg_viewport_2x\n  md-viewport:\n    1x: article_image_portrait_md_viewport_1x\n    2x: article_image_portrait_md_viewport_2x\n  sm-viewport:\n    1x: article_image_portrait_sm_viewport_1x\n    2x: article_image_portrait_sm_viewport_2x", 
            "title": "Pictures"
        }, 
        {
            "location": "/configurations/pictures/#pictures", 
            "text": "The folder  picture  contains a set of yaml-files defining one or more picture-configurations. A picture has a machine name and a mapping of breakpoints, multipliers to image-styles.  The picture-module will render a  picture -element applying the configuration.  A yaml-file can contain only one configuration for a picture. It references the breakpoint_group and has a  mapping  mapping breakpoints, multipliers to a given image-style.  Here's an example:  machine_name: article_image_portrait\nname:  Article image (portrait) \nbreakpoint_group: frontend\nmapping:\n  xl-viewport:\n    1x: article_image_portrait_xl_viewport_1x\n    2x: article_image_portrait_xl_viewport_2x\n  lg-viewport:\n    1x: article_image_portrait_lg_viewport_1x\n    2x: article_image_portrait_lg_viewport_2x\n  md-viewport:\n    1x: article_image_portrait_md_viewport_1x\n    2x: article_image_portrait_md_viewport_2x\n  sm-viewport:\n    1x: article_image_portrait_sm_viewport_1x\n    2x: article_image_portrait_sm_viewport_2x", 
            "title": "Pictures"
        }, 
        {
            "location": "/contribute/entity-scaffolder/", 
            "text": "If you get stuck at any point, please create a \nticket on GitHub\n.\n\n\nPlugin enhancement\n\n\nContribution to plugin itself requires a good understanding of PHP, Drupal and features.\nThe Scaffolder for D7 tries to create files, which features would have created from configurations stored in the database.\n\n\nIf you want to help in creating more plugins or enhance existing ones, please contact the maintainers of the project via GitHub issue queue.\n\n\nContributing Field templates\n\n\nEntity Scaffolder is very opinionated. The definitions created by Entity Scaffolder follows a certain pattern. It uses templates with very restricted support of configurations. Thus, it creates very similar definitions (like field base, field instance, field preprocessing ...) across the whole project.\n\n\nFollowing path placeholders would be used in the examples that follows,\n\n\n\n\n%template_dir%\n : The template directory for scaffolder plugins for the given version. Eg, \n/Drush/EntityScaffolder/d7_1/templates/\n\n\n%field_name%\n : Name of the field that would be used as field type in input yaml files.\n\n\n\n\nField base, Field Instance and Field Preprocess definitions are all created under \n%template_dir%/%field_name%\n\n\nField Base\n\n\nThe templates and configurations required to create a field_base definition. Each new field definitions are added in \nfield_base\n directory under \n%template_dir%/%field_name%/\n.\n\n\nEg. for \nfile\n field,\n\n\n%template_dir%/file/field_base\n    config.yaml\n    feature.content.twig\n\n\n\n\nconfig.yaml\n supports following options\n\n\n\n\n\n\n\n\nOptions\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\ndependencies\n\n\nUsed to declare the field dependency with Drupal modules.\n\n\n\n\n\n\nvariables\n\n\nAn array of variables that is used to create the fields. The key is the name of the variable.\n\n\n\n\n\n\nvariables.%key%.required\n\n\nBoolean indicating if the variable is mandatory or not.\n\n\n\n\n\n\nvariables.%key%.default\n\n\nValue that is assigned to the variable if user doesn't provide it in the configuration.\n\n\n\n\n\n\n\n\nSample config.yaml\n\n\n# Declare the field dependency with Drupal files and media.\ndependencies :\n  - file\n  - media\nvariables :\n  cardinality :\n    type : numeric\n    placeholder : 1\n    # Make the field as non mandatory, i.e. no need to be supplied in yaml configuration.\n    required : false\n    # Use default value 1, when cardinality is not provided.\n    default : 1\n\n\n\n\nSample feature.content.twig\n\n\n\n\n  // Exported field_base: '{{ field_name }}'.\n  $field_bases['{{ field_name }}'] = array(\n    'active' =\n 1,\n    'cardinality' =\n {{ cardinality }},\n    'deleted' =\n 0,\n    'entity_types' =\n array(),\n    'field_name' =\n '{{ field_name }}',\n    'indexes' =\n array(\n      'fid' =\n array(\n        0 =\n 'fid',\n      ),\n    ),\n    'locked' =\n 0,\n    'module' =\n 'file',\n    'settings' =\n array(\n      'display_default' =\n 0,\n      'display_field' =\n 0,\n      'uri_scheme' =\n 'public',\n    ),\n    'translatable' =\n 0,\n    'type' =\n 'file',\n  );\n\n\n\n\nThe content of \nfeature.content.twig\n is the snippet required to create the feature export for field_base.\n\n\n\n\nTip\n\n\nTo generate above code,\n\n\n\n\nCreate a dummy field using Drupal's Field UI.\n\n\nExport the dummy field using feature\n\n\nCopy the base definition to feature.content.twig\n\n\nReplace the relevant part with placeholders. Eg. field_name and cardinality as seen above.\n\n\n\n\n\n\nField Instance\n\n\nField Instance definition generation is almost same as field base definition.\n\n\n%template_dir%/file/field_instance\n    config.yaml\n    feature.content.twig\n\n\n\n\nInstead of field_base, you would put the templates in field_instance.\nReplace the content in feature.content.twig with field instance output from exported dummy feature.\n\n\nField Preprocess\n\n\n%template_dir%/file/preprocess\n    config.yaml\n    code.content.twig\n    pattern.twig\n\n\n\n\n\n\nconfig.yaml follows more or less same convention as for field_base and field_instance's config.yaml\n\n\ncode.content.twig would contain the variables preprocessing template for theme.\n\n\npattern.twig will hold template for helper comment in twig template, showing details of variable and its mapping.", 
            "title": "EntityScaffolder"
        }, 
        {
            "location": "/contribute/entity-scaffolder/#plugin-enhancement", 
            "text": "Contribution to plugin itself requires a good understanding of PHP, Drupal and features.\nThe Scaffolder for D7 tries to create files, which features would have created from configurations stored in the database.  If you want to help in creating more plugins or enhance existing ones, please contact the maintainers of the project via GitHub issue queue.", 
            "title": "Plugin enhancement"
        }, 
        {
            "location": "/contribute/entity-scaffolder/#contributing-field-templates", 
            "text": "Entity Scaffolder is very opinionated. The definitions created by Entity Scaffolder follows a certain pattern. It uses templates with very restricted support of configurations. Thus, it creates very similar definitions (like field base, field instance, field preprocessing ...) across the whole project.  Following path placeholders would be used in the examples that follows,   %template_dir%  : The template directory for scaffolder plugins for the given version. Eg,  /Drush/EntityScaffolder/d7_1/templates/  %field_name%  : Name of the field that would be used as field type in input yaml files.   Field base, Field Instance and Field Preprocess definitions are all created under  %template_dir%/%field_name%", 
            "title": "Contributing Field templates"
        }, 
        {
            "location": "/contribute/entity-scaffolder/#field-base", 
            "text": "The templates and configurations required to create a field_base definition. Each new field definitions are added in  field_base  directory under  %template_dir%/%field_name%/ .  Eg. for  file  field,  %template_dir%/file/field_base\n    config.yaml\n    feature.content.twig  config.yaml  supports following options     Options  Details      dependencies  Used to declare the field dependency with Drupal modules.    variables  An array of variables that is used to create the fields. The key is the name of the variable.    variables.%key%.required  Boolean indicating if the variable is mandatory or not.    variables.%key%.default  Value that is assigned to the variable if user doesn't provide it in the configuration.     Sample config.yaml  # Declare the field dependency with Drupal files and media.\ndependencies :\n  - file\n  - media\nvariables :\n  cardinality :\n    type : numeric\n    placeholder : 1\n    # Make the field as non mandatory, i.e. no need to be supplied in yaml configuration.\n    required : false\n    # Use default value 1, when cardinality is not provided.\n    default : 1  Sample feature.content.twig  \n\n  // Exported field_base: '{{ field_name }}'.\n  $field_bases['{{ field_name }}'] = array(\n    'active' =  1,\n    'cardinality' =  {{ cardinality }},\n    'deleted' =  0,\n    'entity_types' =  array(),\n    'field_name' =  '{{ field_name }}',\n    'indexes' =  array(\n      'fid' =  array(\n        0 =  'fid',\n      ),\n    ),\n    'locked' =  0,\n    'module' =  'file',\n    'settings' =  array(\n      'display_default' =  0,\n      'display_field' =  0,\n      'uri_scheme' =  'public',\n    ),\n    'translatable' =  0,\n    'type' =  'file',\n  );  The content of  feature.content.twig  is the snippet required to create the feature export for field_base.   Tip  To generate above code,   Create a dummy field using Drupal's Field UI.  Export the dummy field using feature  Copy the base definition to feature.content.twig  Replace the relevant part with placeholders. Eg. field_name and cardinality as seen above.", 
            "title": "Field Base"
        }, 
        {
            "location": "/contribute/entity-scaffolder/#field-instance", 
            "text": "Field Instance definition generation is almost same as field base definition.  %template_dir%/file/field_instance\n    config.yaml\n    feature.content.twig  Instead of field_base, you would put the templates in field_instance.\nReplace the content in feature.content.twig with field instance output from exported dummy feature.", 
            "title": "Field Instance"
        }, 
        {
            "location": "/contribute/entity-scaffolder/#field-preprocess", 
            "text": "%template_dir%/file/preprocess\n    config.yaml\n    code.content.twig\n    pattern.twig   config.yaml follows more or less same convention as for field_base and field_instance's config.yaml  code.content.twig would contain the variables preprocessing template for theme.  pattern.twig will hold template for helper comment in twig template, showing details of variable and its mapping.", 
            "title": "Field Preprocess"
        }, 
        {
            "location": "/contribute/documentation/", 
            "text": "Improving Documenation\n\n\n\n\nTip\n\n\nTo edit existing pages, use the \nEdit on GitHub\n link on the top right corner of the page.\n\n\nTo add a new page to documentation please follow \nthe guideline provided by MKdocs\n to add new page and link them within the documentation.\n\n\n\n\n\n\nNote\n\n\n\n\nInstall MkDocs\n.\n\n\nInstall Mike\n.\n\n\nClone \nthe repo\n locally and switch to \ndevelop\n branch.\n\n\nRun \nmike deploy [version]\n\n\n\n\n\n\nResources\n\n\n\n\nWriting your docs in MKdocs", 
            "title": "Documentation"
        }, 
        {
            "location": "/contribute/documentation/#improving-documenation", 
            "text": "Tip  To edit existing pages, use the  Edit on GitHub  link on the top right corner of the page.  To add a new page to documentation please follow  the guideline provided by MKdocs  to add new page and link them within the documentation.    Note   Install MkDocs .  Install Mike .  Clone  the repo  locally and switch to  develop  branch.  Run  mike deploy [version]", 
            "title": "Improving Documenation"
        }, 
        {
            "location": "/contribute/documentation/#resources", 
            "text": "Writing your docs in MKdocs", 
            "title": "Resources"
        }
    ]
}