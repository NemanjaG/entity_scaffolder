{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is EntityScaffolder EntityScaffolder is a scaffolding tool. It is used to create Entities and Fields quickly and conviniently for a Drupal project. The EntityScaffolder makes use of the Drush and other third party components which allows you to automatically generate much of code required to create some entities and fields. In addition, EntityScaffolder also provides some helper functions to support theming integration with patternlab based frontend. Some common tasks are: Create Entities Fieldable Panels Pane Paragraphs Attach fields to created entities Text Long Text File Image Picture Paragraph Create image-styles, breakpoints and picture configurations Create placeholder Drupal Templates Add some preprocessing to the templates to provide sensible defaults to work with Installation Entity Scaffolder depends on drush (the DRU pal SH ell). To use entity_scaffodler, you have to first download and install drush from drush . Install instructions can be found at Drush's README.txt . It contains a section about installing other commands like drush_make. Here is the relevant section. You can put this folder in a number of places: - In a .drush folder in your HOME folder. Note, that you have to make the .drush folder yourself (so you end up with ~/.drush/entity_scaffodler/README.md). - In a folder specified with the include option (see above). - In /path/to/drush/commands (not a Smart Thing, but it would work). Note After checking out the repo, please run composer install inside the entity_scaffodler directory. Scaffold File Layout Your scaffolder source files should be written as regular yaml files, and placed in a directory somewhere in your project. Normally this directory will be named under .tools/es and will exist at the top level of your project. The typical project you can create will look something like this: .tools/es/ config.yaml fpp/ gallery.yaml copy.yaml intro.yaml video.yaml multimedia.yaml paragraphs/ video.yaml text.yaml headline.yaml breakpoint_groups/ Frontend.yaml image_style/ article_image_portrait.yaml article_image.yaml card-related.yaml picture/ article-image-portrait.yaml article-image.yaml card-related.yaml Running EntityScaffolder Use EntityScaffolder as drush plugin $ cd your-drupal-root-folder $ drush es This will read cofniguration files from .tool/es directory under your-drupal-root-folder .","title":"What is EntityScaffolder"},{"location":"#what-is-entityscaffolder","text":"EntityScaffolder is a scaffolding tool. It is used to create Entities and Fields quickly and conviniently for a Drupal project. The EntityScaffolder makes use of the Drush and other third party components which allows you to automatically generate much of code required to create some entities and fields. In addition, EntityScaffolder also provides some helper functions to support theming integration with patternlab based frontend. Some common tasks are: Create Entities Fieldable Panels Pane Paragraphs Attach fields to created entities Text Long Text File Image Picture Paragraph Create image-styles, breakpoints and picture configurations Create placeholder Drupal Templates Add some preprocessing to the templates to provide sensible defaults to work with","title":"What is EntityScaffolder"},{"location":"#installation","text":"Entity Scaffolder depends on drush (the DRU pal SH ell). To use entity_scaffodler, you have to first download and install drush from drush . Install instructions can be found at Drush's README.txt . It contains a section about installing other commands like drush_make. Here is the relevant section. You can put this folder in a number of places: - In a .drush folder in your HOME folder. Note, that you have to make the .drush folder yourself (so you end up with ~/.drush/entity_scaffodler/README.md). - In a folder specified with the include option (see above). - In /path/to/drush/commands (not a Smart Thing, but it would work). Note After checking out the repo, please run composer install inside the entity_scaffodler directory.","title":"Installation"},{"location":"#scaffold-file-layout","text":"Your scaffolder source files should be written as regular yaml files, and placed in a directory somewhere in your project. Normally this directory will be named under .tools/es and will exist at the top level of your project. The typical project you can create will look something like this: .tools/es/ config.yaml fpp/ gallery.yaml copy.yaml intro.yaml video.yaml multimedia.yaml paragraphs/ video.yaml text.yaml headline.yaml breakpoint_groups/ Frontend.yaml image_style/ article_image_portrait.yaml article_image.yaml card-related.yaml picture/ article-image-portrait.yaml article-image.yaml card-related.yaml","title":"Scaffold File Layout"},{"location":"#running-entityscaffolder","text":"Use EntityScaffolder as drush plugin $ cd your-drupal-root-folder $ drush es This will read cofniguration files from .tool/es directory under your-drupal-root-folder .","title":"Running EntityScaffolder"},{"location":"available-tasks/","text":"entity_scaffolder Use the information provided in scaffold source files to create features and helper modules. Usage: $ drush es Available Options Options Default Details config-dir .tools/es Relative path to the directory where the scaffold source files have to be picked up from debug false If set to true, prints the output of scaffolder on screen","title":"Available tasks"},{"location":"available-tasks/#entity_scaffolder","text":"Use the information provided in scaffold source files to create features and helper modules. Usage: $ drush es Available Options Options Default Details config-dir .tools/es Relative path to the directory where the scaffold source files have to be picked up from debug false If set to true, prints the output of scaffolder on screen","title":"entity_scaffolder"},{"location":"installation/","text":"","title":"Installation"},{"location":"usage/","text":"Tasks","title":"Tasks"},{"location":"usage/#tasks","text":"","title":"Tasks"},{"location":"configurations/breakpoint_groups/","text":"Breakpoint Groups Breakpoint Groups contain the configuration of breakpoints and their grouping. Breakpoints are needed for the picture module, so it can map a specific image style to a given breakpoint. Breakpoint groups should resemble the frontend breakpoint configuration. Breakpoint groups are defined in one yaml file which is stored in the .tools/es/breakpoint_groups -folder. A grou consists of a list of breakpoints which store a machine-name a media-query and a list of multipliers (for retina-displays) Here's an example: name: Frontend breakpoints machine_name: frontend breakpoints: - machine_name: xl-viewport media: '(min-width: 1600px)' multiplier: - 1x - 2x - machine_name: lg-viewport media: '(min-width: 1280px)' multiplier: - 1x - 2x - machine_name: md-viewport media: '(min-width: 1024px) and (max-width: 1279px)' multiplier: - 1x - 2x - machine_name: md-lg-viewport media: '(min-width: 1024px)' multiplier: - 1x - 2x - machine_name: sm-md-viewport media: '(max-width: 1279px)' multiplier: - 1x - 2x - machine_name: sm-viewport media: '(max-width: 1023px)' multiplier: - 1x - 2x","title":"Breakpoint Groups"},{"location":"configurations/breakpoint_groups/#breakpoint-groups","text":"Breakpoint Groups contain the configuration of breakpoints and their grouping. Breakpoints are needed for the picture module, so it can map a specific image style to a given breakpoint. Breakpoint groups should resemble the frontend breakpoint configuration. Breakpoint groups are defined in one yaml file which is stored in the .tools/es/breakpoint_groups -folder. A grou consists of a list of breakpoints which store a machine-name a media-query and a list of multipliers (for retina-displays) Here's an example: name: Frontend breakpoints machine_name: frontend breakpoints: - machine_name: xl-viewport media: '(min-width: 1600px)' multiplier: - 1x - 2x - machine_name: lg-viewport media: '(min-width: 1280px)' multiplier: - 1x - 2x - machine_name: md-viewport media: '(min-width: 1024px) and (max-width: 1279px)' multiplier: - 1x - 2x - machine_name: md-lg-viewport media: '(min-width: 1024px)' multiplier: - 1x - 2x - machine_name: sm-md-viewport media: '(max-width: 1279px)' multiplier: - 1x - 2x - machine_name: sm-viewport media: '(max-width: 1023px)' multiplier: - 1x - 2x","title":"Breakpoint Groups"},{"location":"configurations/config/","text":"config.yaml Project specific configuration file. All global settings required for the EntityScaffolder will be stored in this file. This file should be located in the directory supplied via config-dir option for drush es . The default location if no config-dir is supplied would be .tools/es/config.yaml . Example project_short_code : mic templates: factorial: # Can be FALLBACK, EXTEND, OVERRIDE type: OVERRIDE dir: /.entity_scaffolder/factorial # Pass the project specific directory locations. directories : theme : sites/all/themes/custom/my_custom_theme templates : sites/all/themes/custom/my_custom_theme/templates patternlab : sites/all/themes/custom/my_custom_theme/source Key/value pairs The following key/value pairs provide meta-data about your scaffolder configuration and define some of the basic functionality. project_short_code (required) templates (optional) directories (required) project_short_code (required) Project short code. Used for various prefixes like module names, theme names, etc. Suggested to use 2 or 3 alphabets. project_short_code : mic templates (optional) A list of custom template definitions for scaffolding. Supports 3 strategies, DEFAULT - Replace the template definitions provided by Entity Scaffolder, and sets itself as the default. FALLBACK - Use these templates only if they are missing in DEFAULT EXTEND - Use DEFAULT template only if they are missing in these templates. So in short, EXTEND DEFAULT FALLBACK. templates: factorial: # Can be FALLBACK, EXTEND or OVERRIDE. type: OVERRIDE # path relative to `config-dir` with a leading slash. dir: /.entity_scaffolder/factorial directories (required) Entity Scaffolder requires location of some directories to write generated files. These can be supplied as such. # Pass the project specific directory locations. directories : # Location of custom theme theme : sites/all/themes/custom/my_custom_theme # Location of template directory within the custom theme templates : sites/all/themes/custom/my_custom_theme/templates # Location of patternlab source folder. patternlab : sites/all/themes/custom/my_custom_theme/source","title":"config.yaml"},{"location":"configurations/config/#configyaml","text":"Project specific configuration file. All global settings required for the EntityScaffolder will be stored in this file. This file should be located in the directory supplied via config-dir option for drush es . The default location if no config-dir is supplied would be .tools/es/config.yaml .","title":"config.yaml"},{"location":"configurations/config/#example","text":"project_short_code : mic templates: factorial: # Can be FALLBACK, EXTEND, OVERRIDE type: OVERRIDE dir: /.entity_scaffolder/factorial # Pass the project specific directory locations. directories : theme : sites/all/themes/custom/my_custom_theme templates : sites/all/themes/custom/my_custom_theme/templates patternlab : sites/all/themes/custom/my_custom_theme/source","title":"Example"},{"location":"configurations/config/#keyvalue-pairs","text":"The following key/value pairs provide meta-data about your scaffolder configuration and define some of the basic functionality. project_short_code (required) templates (optional) directories (required)","title":"Key/value pairs"},{"location":"configurations/config/#project_short_code-required","text":"Project short code. Used for various prefixes like module names, theme names, etc. Suggested to use 2 or 3 alphabets. project_short_code : mic","title":"project_short_code (required)"},{"location":"configurations/config/#templates-optional","text":"A list of custom template definitions for scaffolding. Supports 3 strategies, DEFAULT - Replace the template definitions provided by Entity Scaffolder, and sets itself as the default. FALLBACK - Use these templates only if they are missing in DEFAULT EXTEND - Use DEFAULT template only if they are missing in these templates. So in short, EXTEND DEFAULT FALLBACK. templates: factorial: # Can be FALLBACK, EXTEND or OVERRIDE. type: OVERRIDE # path relative to `config-dir` with a leading slash. dir: /.entity_scaffolder/factorial","title":"templates (optional)"},{"location":"configurations/config/#directories-required","text":"Entity Scaffolder requires location of some directories to write generated files. These can be supplied as such. # Pass the project specific directory locations. directories : # Location of custom theme theme : sites/all/themes/custom/my_custom_theme # Location of template directory within the custom theme templates : sites/all/themes/custom/my_custom_theme/templates # Location of patternlab source folder. patternlab : sites/all/themes/custom/my_custom_theme/source","title":"directories (required)"},{"location":"configurations/entities/","text":"Entities Use the following table to determine the folder under which the configuration files for entities have to be placed. Folder Name Entity Type fpp Fieldable Panels Panes paragraphs Paragraph Items Create a file for each entity bundle inside the respective folders. Usually the files are named according to the bundles. An example bundle specific configuration file looks like below # Label of the Drupal entity bundle. name: Brochure # Machine name in Drupal. machine_name: brochure # Fields acttached to the bundles. fields: files: map: download_brochure cardinality: 1 type: file label: PDF of our Brochure file_extensions: pdf introduction: map: introduction type: text_long label: Introduction allowed_formats: - html default_format: html","title":"Entities"},{"location":"configurations/entities/#entities","text":"Use the following table to determine the folder under which the configuration files for entities have to be placed. Folder Name Entity Type fpp Fieldable Panels Panes paragraphs Paragraph Items Create a file for each entity bundle inside the respective folders. Usually the files are named according to the bundles. An example bundle specific configuration file looks like below # Label of the Drupal entity bundle. name: Brochure # Machine name in Drupal. machine_name: brochure # Fields acttached to the bundles. fields: files: map: download_brochure cardinality: 1 type: file label: PDF of our Brochure file_extensions: pdf introduction: map: introduction type: text_long label: Introduction allowed_formats: - html default_format: html","title":"Entities"},{"location":"configurations/fields/","text":"Field Instances and Field Bases are defined in the Entity bundle they are attached to. Following fields are supported, Text @TODO Long Text Options Descriptions type Type of the field. Must be text_long . map Patternlab mapping cadrinality Number of values stored in this field. -1 means unlimitted. label Drupal Field Label allowed formats List of allowed text formats. default_format Default text format for the field. Example name: Copy machine_name: copy fields: content: type: text_long map: content cardinality: 1 label: Content allowed_formats: - html default_format: html File @TODO Image @TODO Paragraph @TODO","title":"Fields"},{"location":"configurations/fields/#text","text":"@TODO","title":"Text"},{"location":"configurations/fields/#long-text","text":"Options Descriptions type Type of the field. Must be text_long . map Patternlab mapping cadrinality Number of values stored in this field. -1 means unlimitted. label Drupal Field Label allowed formats List of allowed text formats. default_format Default text format for the field. Example name: Copy machine_name: copy fields: content: type: text_long map: content cardinality: 1 label: Content allowed_formats: - html default_format: html","title":"Long Text"},{"location":"configurations/fields/#file","text":"@TODO","title":"File"},{"location":"configurations/fields/#image","text":"@TODO","title":"Image"},{"location":"configurations/fields/#paragraph","text":"@TODO","title":"Paragraph"},{"location":"configurations/image_styles/","text":"Image styles The folder image_style contains a set of yaml-files defining one or more image styles. Each yaml-file contains a set of image styles. Here's an example: prefix: machine_name: article_image_portrait_ name: Article Image (portrait) multiplier: - 1x - 2x image_styles: - machine_name: xl-viewport effects: - name: image_scale data: width: 468 - machine_name: lg-viewport effects: - name: image_scale data: width: 468 - machine_name: md-viewport effects: - name: image_scale data: width: 468 - machine_name: sm-viewport effects: - name: image_scale data: width: 288 When using the prefix the name of a single image style will be prefix/machine_name machine_name e.g. article_image_portrait_md-viewport effects contains a list of image effects. es supports these image-effects: image_scale image_desaturate focal_point_scale_and_crop","title":"Image styles"},{"location":"configurations/image_styles/#image-styles","text":"The folder image_style contains a set of yaml-files defining one or more image styles. Each yaml-file contains a set of image styles. Here's an example: prefix: machine_name: article_image_portrait_ name: Article Image (portrait) multiplier: - 1x - 2x image_styles: - machine_name: xl-viewport effects: - name: image_scale data: width: 468 - machine_name: lg-viewport effects: - name: image_scale data: width: 468 - machine_name: md-viewport effects: - name: image_scale data: width: 468 - machine_name: sm-viewport effects: - name: image_scale data: width: 288 When using the prefix the name of a single image style will be prefix/machine_name machine_name e.g. article_image_portrait_md-viewport effects contains a list of image effects. es supports these image-effects: image_scale image_desaturate focal_point_scale_and_crop","title":"Image styles"},{"location":"configurations/pictures/","text":"Pictures The folder picture contains a set of yaml-files defining one or more picture-configurations. A picture has a machine name and a mapping of breakpoints, multipliers to image-styles. The picture-module will render a picture -element applying the configuration. A yaml-file can contain only one configuration for a picture. It references the breakpoint_group and has a mapping mapping breakpoints, multipliers to a given image-style. Here's an example: machine_name: article_image_portrait name: Article image (portrait) breakpoint_group: frontend mapping: xl-viewport: 1x: article_image_portrait_xl_viewport_1x 2x: article_image_portrait_xl_viewport_2x lg-viewport: 1x: article_image_portrait_lg_viewport_1x 2x: article_image_portrait_lg_viewport_2x md-viewport: 1x: article_image_portrait_md_viewport_1x 2x: article_image_portrait_md_viewport_2x sm-viewport: 1x: article_image_portrait_sm_viewport_1x 2x: article_image_portrait_sm_viewport_2x","title":"Pictures"},{"location":"configurations/pictures/#pictures","text":"The folder picture contains a set of yaml-files defining one or more picture-configurations. A picture has a machine name and a mapping of breakpoints, multipliers to image-styles. The picture-module will render a picture -element applying the configuration. A yaml-file can contain only one configuration for a picture. It references the breakpoint_group and has a mapping mapping breakpoints, multipliers to a given image-style. Here's an example: machine_name: article_image_portrait name: Article image (portrait) breakpoint_group: frontend mapping: xl-viewport: 1x: article_image_portrait_xl_viewport_1x 2x: article_image_portrait_xl_viewport_2x lg-viewport: 1x: article_image_portrait_lg_viewport_1x 2x: article_image_portrait_lg_viewport_2x md-viewport: 1x: article_image_portrait_md_viewport_1x 2x: article_image_portrait_md_viewport_2x sm-viewport: 1x: article_image_portrait_sm_viewport_1x 2x: article_image_portrait_sm_viewport_2x","title":"Pictures"},{"location":"configurations/text_filters/","text":"What are features? Features provides a UI and API for taking different site building components from modules with exportables and bundling them together in a single feature module. A feature module is like any other Drupal module except that it contains additional information in its info file so that configuration can be checked, updated, or reverted programmatically. Entity Scaffolder makes use of features module to export its code. The actual creation and update of the entities and fields are taken care by Features module. fe_es Warning Do not edit this feature manually. Changes will be lost/overriden next time you run drush es . Main features module created by Entity Scaffolder. Everytime you run drush es the folder gets overwritten. fe_es_filters Provides default text filters. The feature is not over-written in subsequent runs. This allows updating and export of the feature per instance. Read more about text filters and input format on Drupal.org","title":"Features"},{"location":"configurations/text_filters/#what-are-features","text":"Features provides a UI and API for taking different site building components from modules with exportables and bundling them together in a single feature module. A feature module is like any other Drupal module except that it contains additional information in its info file so that configuration can be checked, updated, or reverted programmatically. Entity Scaffolder makes use of features module to export its code. The actual creation and update of the entities and fields are taken care by Features module.","title":"What are features?"},{"location":"configurations/text_filters/#fe_es","text":"Warning Do not edit this feature manually. Changes will be lost/overriden next time you run drush es . Main features module created by Entity Scaffolder. Everytime you run drush es the folder gets overwritten.","title":"fe_es"},{"location":"configurations/text_filters/#fe_es_filters","text":"Provides default text filters. The feature is not over-written in subsequent runs. This allows updating and export of the feature per instance. Read more about text filters and input format on Drupal.org","title":"fe_es_filters"},{"location":"contribute/documentation/","text":"Improving Documenation Tip To edit existing pages, use the Edit on GitHub link on the top right corner of the page. To add a new page to documentation please follow the guideline provided by MKdocs to add new page and link them within the documentation. Note Install MkDocs . Install Mike . Clone the repo locally and switch to develop branch. Run mike deploy [version] Resources Writing your docs in MKdocs","title":"Documentation"},{"location":"contribute/documentation/#improving-documenation","text":"Tip To edit existing pages, use the Edit on GitHub link on the top right corner of the page. To add a new page to documentation please follow the guideline provided by MKdocs to add new page and link them within the documentation. Note Install MkDocs . Install Mike . Clone the repo locally and switch to develop branch. Run mike deploy [version]","title":"Improving Documenation"},{"location":"contribute/documentation/#resources","text":"Writing your docs in MKdocs","title":"Resources"},{"location":"contribute/entity-scaffolder/","text":"If you get stuck at any point, please create a ticket on GitHub . Plugin enhancement Contribution to plugin itself requires a good understanding of PHP, Drupal and features. The Scaffolder for D7 tries to create files, which features would have created from configurations stored in the database. If you want to help in creating more plugins or enhance existing ones, please contact the maintainers of the project via GitHub issue queue. Contributing Field templates Entity Scaffolder is very opinionated. The definitions created by Entity Scaffolder follows a certain pattern. It uses templates with very restricted support of configurations. Thus, it creates very similar definitions (like field base, field instance, field preprocessing ...) across the whole project. Following path placeholders would be used in the examples that follows, %template_dir% : The template directory for scaffolder plugins for the given version. Eg, /Drush/EntityScaffolder/d7_1/templates/ %field_name% : Name of the field that would be used as field type in input yaml files. Field base, Field Instance and Field Preprocess definitions are all created under %template_dir%/%field_name% Field Base The templates and configurations required to create a field_base definition. Each new field definitions are added in field_base directory under %template_dir%/%field_name%/ . Eg. for file field, %template_dir%/file/field_base config.yaml feature.content.twig config.yaml supports following options Options Details dependencies Used to declare the field dependency with Drupal modules. variables An array of variables that is used to create the fields. The key is the name of the variable. variables.%key%.required Boolean indicating if the variable is mandatory or not. variables.%key%.default Value that is assigned to the variable if user doesn't provide it in the configuration. Sample config.yaml # Declare the field dependency with Drupal files and media. dependencies : - file - media variables : cardinality : type : numeric placeholder : 1 # Make the field as non mandatory, i.e. no need to be supplied in yaml configuration. required : false # Use default value 1, when cardinality is not provided. default : 1 Sample feature.content.twig // Exported field_base: '{{ field_name }}'. $field_bases['{{ field_name }}'] = array( 'active' = 1, 'cardinality' = {{ cardinality }}, 'deleted' = 0, 'entity_types' = array(), 'field_name' = '{{ field_name }}', 'indexes' = array( 'fid' = array( 0 = 'fid', ), ), 'locked' = 0, 'module' = 'file', 'settings' = array( 'display_default' = 0, 'display_field' = 0, 'uri_scheme' = 'public', ), 'translatable' = 0, 'type' = 'file', ); The content of feature.content.twig is the snippet required to create the feature export for field_base. Tip To generate above code, Create a dummy field using Drupal's Field UI. Export the dummy field using feature Copy the base definition to feature.content.twig Replace the relevant part with placeholders. Eg. field_name and cardinality as seen above. Field Instance Field Instance definition generation is almost same as field base definition. %template_dir%/file/field_instance config.yaml feature.content.twig Instead of field_base, you would put the templates in field_instance. Replace the content in feature.content.twig with field instance output from exported dummy feature. Field Preprocess %template_dir%/file/preprocess config.yaml code.content.twig pattern.twig config.yaml follows more or less same convention as for field_base and field_instance's config.yaml code.content.twig would contain the variables preprocessing template for theme. pattern.twig will hold template for helper comment in twig template, showing details of variable and its mapping.","title":"EntityScaffolder"},{"location":"contribute/entity-scaffolder/#plugin-enhancement","text":"Contribution to plugin itself requires a good understanding of PHP, Drupal and features. The Scaffolder for D7 tries to create files, which features would have created from configurations stored in the database. If you want to help in creating more plugins or enhance existing ones, please contact the maintainers of the project via GitHub issue queue.","title":"Plugin enhancement"},{"location":"contribute/entity-scaffolder/#contributing-field-templates","text":"Entity Scaffolder is very opinionated. The definitions created by Entity Scaffolder follows a certain pattern. It uses templates with very restricted support of configurations. Thus, it creates very similar definitions (like field base, field instance, field preprocessing ...) across the whole project. Following path placeholders would be used in the examples that follows, %template_dir% : The template directory for scaffolder plugins for the given version. Eg, /Drush/EntityScaffolder/d7_1/templates/ %field_name% : Name of the field that would be used as field type in input yaml files. Field base, Field Instance and Field Preprocess definitions are all created under %template_dir%/%field_name%","title":"Contributing Field templates"},{"location":"contribute/entity-scaffolder/#field-base","text":"The templates and configurations required to create a field_base definition. Each new field definitions are added in field_base directory under %template_dir%/%field_name%/ . Eg. for file field, %template_dir%/file/field_base config.yaml feature.content.twig config.yaml supports following options Options Details dependencies Used to declare the field dependency with Drupal modules. variables An array of variables that is used to create the fields. The key is the name of the variable. variables.%key%.required Boolean indicating if the variable is mandatory or not. variables.%key%.default Value that is assigned to the variable if user doesn't provide it in the configuration. Sample config.yaml # Declare the field dependency with Drupal files and media. dependencies : - file - media variables : cardinality : type : numeric placeholder : 1 # Make the field as non mandatory, i.e. no need to be supplied in yaml configuration. required : false # Use default value 1, when cardinality is not provided. default : 1 Sample feature.content.twig // Exported field_base: '{{ field_name }}'. $field_bases['{{ field_name }}'] = array( 'active' = 1, 'cardinality' = {{ cardinality }}, 'deleted' = 0, 'entity_types' = array(), 'field_name' = '{{ field_name }}', 'indexes' = array( 'fid' = array( 0 = 'fid', ), ), 'locked' = 0, 'module' = 'file', 'settings' = array( 'display_default' = 0, 'display_field' = 0, 'uri_scheme' = 'public', ), 'translatable' = 0, 'type' = 'file', ); The content of feature.content.twig is the snippet required to create the feature export for field_base. Tip To generate above code, Create a dummy field using Drupal's Field UI. Export the dummy field using feature Copy the base definition to feature.content.twig Replace the relevant part with placeholders. Eg. field_name and cardinality as seen above.","title":"Field Base"},{"location":"contribute/entity-scaffolder/#field-instance","text":"Field Instance definition generation is almost same as field base definition. %template_dir%/file/field_instance config.yaml feature.content.twig Instead of field_base, you would put the templates in field_instance. Replace the content in feature.content.twig with field instance output from exported dummy feature.","title":"Field Instance"},{"location":"contribute/entity-scaffolder/#field-preprocess","text":"%template_dir%/file/preprocess config.yaml code.content.twig pattern.twig config.yaml follows more or less same convention as for field_base and field_instance's config.yaml code.content.twig would contain the variables preprocessing template for theme. pattern.twig will hold template for helper comment in twig template, showing details of variable and its mapping.","title":"Field Preprocess"}]}